<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on This and That</title>
    <link>http://derekelliott.me/blog/</link>
    <description>Recent content in Blogs on This and That</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Jul 2018 11:50:00 -0400</lastBuildDate>
    
	<atom:link href="http://derekelliott.me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a Url Shortner: Part 2</title>
      <link>http://derekelliott.me/blog/2018/2/</link>
      <pubDate>Thu, 05 Jul 2018 11:50:00 -0400</pubDate>
      
      <guid>http://derekelliott.me/blog/2018/2/</guid>
      <description>In part two, I&amp;rsquo;ll go over how I built out my service. Most of the effort in building it out, came in writing meaningful tests. It&amp;rsquo;s also the first time I&amp;rsquo;ve build out a webapp in Go that actually used persistence. I ended up using Postgres and Gorm for the database and Redis to cache tokens and URLs. For testing, I like to use Testify and Mockery to generate mocks for testing.</description>
    </item>
    
    <item>
      <title>Building a URL Shortner</title>
      <link>http://derekelliott.me/blog/2018/1/</link>
      <pubDate>Sat, 09 Jun 2018 11:48:38 -0400</pubDate>
      
      <guid>http://derekelliott.me/blog/2018/1/</guid>
      <description>I&amp;rsquo;ve always wanted to build a URL shortener. It seems like an easy project to keep up on my Go. In this post, I&amp;rsquo;ll go over the requirements and some basic design. Because this is just for me and this blog, I get to set my own requirements. Yay. This will be a URL shortener where the links have an expiration date, so it&amp;rsquo;ll be like Snapchat, but with shortened links.</description>
    </item>
    
  </channel>
</rss>